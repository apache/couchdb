#!/bin/sh -e
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

# next steps:
# try running this, figure out what to do with the vars in the generated files
# in the bottom

# cd into this scriptâ€™s directory
rootdir="$(cd "${0%/*}" 2>/dev/null; echo "$PWD")"
basename=`basename $0`

PACKAGE_AUTHOR_NAME="The Apache Software Foundation"

REBAR3_BRANCH="3.23.0"
ERLFMT_VERSION="v1.3.0"

# TEST=0
WITH_PROPER="true"
WITH_FAUXTON="true"
WITH_DOCS="true"
WITH_NOUVEAU="false"
WITH_CLOUSEAU="false"
ERLANG_MD5="false"
SKIP_DEPS="false"
WITH_SPIDERMONKEY="true"

run_erlang() {
    erl -noshell -eval "$1" -eval "halt()."
}

COUCHDB_USER="$(whoami 2>/dev/null || echo couchdb)"
JS_ENGINE=${JS_ENGINE:-"spidermonkey"}
SM_VSN=${SM_VSN:-"91"}
CLOUSEAU_MTH=${CLOUSEAU_MTH:-"dist"}
CLOUSEAU_URI=${CLOUSEAU_URI:-"https://github.com/cloudant-labs/clouseau/releases/download/%s/clouseau-%s-dist.zip"}
CLOUSEAU_VSN=${CLOUSEAU_VSN:-"2.23.1"}
CLOUSEAU_DIR="$(pwd)"/clouseau
ARCH="$(uname -m)"
ERLANG_VER="$(run_erlang 'io:put_chars(erlang:system_info(otp_release)).')"
ERLANG_OS="$(run_erlang 'case os:type() of {OS, _} -> io:format("~s~n", [OS]) end.')"

display_help () {
    cat << EOF
Usage: $basename [OPTION]

The $basename command is responsible for generating the build
system for Apache CouchDB.

Options:

  -h | --help                 Display this help message and exit
  -u | --user USER            Set the username to run CouchDB as (default: $COUCHDB_USER)
  --disable-fauxton           Exclude Fauxton web interface from the build
  --disable-docs              Skip building documentation and manpages
  --with-nouveau              Include the new experimental search module
  --with-clouseau             Include the Clouseau search module
  --erlang-md5                Use Erlang for MD5 hash operations instead of native code
  --dev                       Shortcut for --disable-docs --disable-fauxton (dev mode)
  --spidermonkey-version VSN  Set SpiderMonkey version (default: $SM_VSN, e.g., 91, 115)
  --clouseau-method MTH       Set Clouseau deployment method: 'dist' (pre-built) or 'git' (source, default: $CLOUSEAU_MTH)
  --clouseau-uri URI          Set Clouseau source URI (default: $(printf "$CLOUSEAU_URI" "$CLOUSEAU_VSN" "$CLOUSEAU_VSN"))
  --clouseau-version VSN      Set Clouseau version (default: $CLOUSEAU_VSN)
  --skip-deps                 Skip updating Erlang dependencies
  --rebar=PATH                Use specified Rebar executable (v2.6.0 to <3.0 required)
  --rebar3=PATH               Use Rebar3 by specified path
  --erlfmt=PATH               Use erlfmt by specified path
  --js-engine=ENGINE          Set JS engine: 'spidermonkey' or 'quickjs' (default: $JS_ENGINE)
  --disable-spidermonkey      Disable SpiderMonkey, falling back to QuickJS
Example:
  ./$basename --with-clouseau --clouseau-method git --user myuser
    Configures CouchDB with Clouseau from Git and runs as 'myuser'.
EOF
}

parse_opts() {
    while :; do
        case $1 in
            -h|--help)
                display_help
                exit
                ;;

            --without-proper)
                WITH_PROPER="false"
                shift
                continue
                ;;

            --disable-fauxton)
                WITH_FAUXTON="false"
                shift
                continue
                ;;

            --disable-docs)
                WITH_DOCS="false"
                shift
                continue
                ;;

            --with-nouveau)
                WITH_NOUVEAU="true"
                shift
                continue
                ;;

            --with-clouseau)
                WITH_CLOUSEAU="true"
                shift
                continue
                ;;

            --erlang-md5)
                ERLANG_MD5="true"
                shift
                continue
                ;;

            --dev)
                WITH_DOCS="false"
                WITH_FAUXTON="false"
                shift
                continue
                ;;

            --dev-with-nouveau)
                WITH_DOCS="false"
                WITH_FAUXTON="false"
                WITH_NOUVEAU="true"
                shift
                continue
                ;;

            --skip-deps)
                SKIP_DEPS="true"
                shift
                continue
                ;;

            --rebar)
                if [ -x "$2" ]; then
                    version=`$2 --version 2> /dev/null | grep -o "2\.[6-9]\.[0-9]"`
                    if [ $? -ne 0 ]; then
                        printf 'Rebar >=2.6.0 and <3.0.0 required' >&2
                        exit 1
                    fi
                    eval REBAR=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--rebar" requires valid path to executable.\n' >&2
                    exit 1
                fi
                ;;

            --rebar3)
                if [ -x "$2" ]; then
                    eval REBAR3=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--rebar3" requires valid path to executable.\n' >&2
                    exit 1
                fi
                ;;

            --erlfmt)
                if [ -x "$2" ]; then
                    eval ERLFMT=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--erlfmt" requires valid path to executable.\n' >&2
                    exit 1
                fi
                ;;

            --user|-u)
                if [ -n "$2" ]; then
                    eval COUCHDB_USER=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--user" requires a non-empty argument.\n' >&2
                    exit 1
                fi
                ;;
            --user=?*)
                eval COUCHDB_USER=${1#*=}
                ;;
            --user=)
                printf 'ERROR: "--user" requires a non-empty argument.\n' >&2
                exit 1
                ;;

            --spidermonkey-version)
                if [ -n "$2" ]; then
                    eval SM_VSN=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--spidermonkey-version" requires a non-empty argument.\n' >&2
                    exit 1
                fi
                ;;
            --spidermonkey-version=?*)
                eval SM_VSN=${1#*=}
                ;;
            --spidermonkey-version=)
                printf 'ERROR: "--spidermonkey-version" requires a non-empty argument.\n' >&2
                exit 1
                ;;
            --js-engine)
                if [ -n "$2" ]; then
                    eval JS_ENGINE=$2
                    shift 2
                    continue
                else
                    printf 'ERROR: "--js-engine" requires a non-empty argument.\n' >&2
                    exit 1
                fi
                ;;
            --js-engine=?*)
                eval JS_ENGINE=${1#*=}
                ;;
            --js-engine=)
                printf 'ERROR: "--js-engine" requires a non-empty argument.\n' >&2
                exit 1
                ;;
            --disable-spidermonkey)
                WITH_SPIDERMONKEY="false"
                shift
                continue
                ;;

	    --clouseau-version)
		if [ -n "$2" ]; then
		    eval CLOUSEAU_VSN=$2
		    shift 2
		    continue
		else
		    printf 'ERROR: "--clouseau-version" requires a non-empty argument.\n' >&2
		    exit 1
		fi
		;;
	    --clouseau-version=?*)
		eval CLOUSEAU_VSN=${1#*=}
		;;
	    --clouseau-version=)
	        printf 'ERROR: "--clouseau-version" requires a non-empty argument.\n' >&2
	        exit 1
	        ;;

	    --clouseau-method)
		if [ -n "$2" ]; then
		    eval CLOUSEAU_MTH=$2
		    shift 2
		    continue
		else
		    printf 'ERROR: "--clouseau-method" requires a non-empty argument.\n' >&2
		    exit 1
		fi
		;;
	    --clouseau-method=?*)
		eval CLOUSEAU_MTH=${1#*=}
		;;
	    --clouseau-method=)
	        printf 'ERROR: "--clouseau-method" requires a non-empty argument.\n' >&2
	        exit 1
	        ;;

	    --clouseau-uri)
		if [ -n "$2" ]; then
		    eval CLOUSEAU_URI=$2
		    shift 2
		    continue
		else
		    printf 'ERROR: "--clouseau-uri" requires a non-empty argument.\n' >&2
		    exit 1
		fi
		;;
	    --clouseau-uri=?*)
		eval CLOUSEAU_URI=${1#*=}
		;;
	    --clouseau-uri=)
	        printf 'ERROR: "--clouseau-uri" requires a non-empty argument.\n' >&2
	        exit 1
	        ;;

            --) # End of options
                shift
                break
                ;;
            -?*)
                echo "WARNING: Unknown option '$1', ignoring" >&2
                shift
                ;;
            *) # Done
                break
        esac
        shift
    done
}

parse_opts $@

if [ "${WITH_SPIDERMONKEY}" = "true" ] && [ "${ARCH}" = "aarch64" ] && [ "${SM_VSN}" = "60" ]; then
  echo "ERROR: SpiderMonkey 60 is known broken on ARM 64 (aarch64). Use another version instead."
  exit 1
fi

if [ "${WITH_SPIDERMONKEY}" = "true" ] && [ "${ERLANG_OS}" = "unix" ]; then
    case "${SM_VSN}" in
        1.8.5)
            SM_HEADERS="js"
            ;;
        *)  SM_HEADERS="mozjs-${SM_VSN}"
            ;;
        esac

    # This list is taken from src/couch/rebar.config.script, please keep them in sync.
    if [ ! -d "/usr/include/${SM_HEADERS}" ] && \
        [ ! -d "/usr/local/include/${SM_HEADERS}" ] && \
        [ ! -d "/opt/homebrew/include/${SM_HEADERS}" ]; then
        echo "ERROR: SpiderMonkey ${SM_VSN} is not found. Please specify with --spidermonkey-version."
        exit 1
    fi
fi

# If spidermonkey was disabled but JS_ENGINE set to "spidermonkey", reset it to "quickjs"
if [ "${WITH_SPIDERMONKEY}" = "false" ] && [ "${JS_ENGINE}" = "spidermonkey" ]; then
   echo "NOTICE: Spidermonkey was disabled, but JS_ENGINE=spidermonkey. Setting JS_ENGINE=quickjs"
   JS_ENGINE="quickjs"
fi

# If we're in a release tarball and we don't have proper, then mark it as skipped
if [ ! -d .git ] && [ "$WITH_PROPER" = "true" ] && [ ! -d src/proper ]; then
    WITH_PROPER="false"
fi

# If we're in a release tarball and we don't have spidermonkey, then mark it as skipped and enable quickjs
if [ ! -d .git ] && [ "$WITH_SPIDERMONKEY" = "true" ] && [ ! -d src/couch/priv/couch_js ]; then
    echo "NOTICE: Spidermonkey was disabled in release tarball. Setting JS_ENGINE=quickjs"
    WITH_SPIDERMONKEY="false"
    JS_ENGINE="quickjs"
fi

echo "==> configuring couchdb in rel/couchdb.config"
cat > rel/couchdb.config << EOF
% Licensed under the Apache License, Version 2.0 (the "License"); you may not
% use this file except in compliance with the License. You may obtain a copy of
% the License at
%
%   http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
% WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
% License for the specific language governing permissions and limitations under
% the License.
%
% The contents of this file are auto-generated by configure
%
{package_author_name, "$PACKAGE_AUTHOR_NAME"}.
{prefix, "."}.
{data_dir, "./data"}.
{view_index_dir, "./data"}.
{nouveau_index_dir, "./data/nouveau"}.
{nouveau_url, "http://127.0.0.1:5987"}.
{nouveau_port, 5987}.
{nouveau_admin_port, 5988}.
{state_dir, "./data"}.
{log_file, "$LOG_FILE"}.
{fauxton_root, "./share/www"}.
{user, "$COUCHDB_USER"}.
{js_engine, "$JS_ENGINE"}.
{spidermonkey_version, "$SM_VSN"}.
{with_spidermonkey, $WITH_SPIDERMONKEY}.
{node_name, "-name couchdb@127.0.0.1"}.
{cluster_port, 5984}.
{backend_port, 5986}.
{prometheus_port, 17986}.
EOF

cat > install.mk << EOF
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
# The contents of this file are auto-generated by configure
#
package_author_name = $PACKAGE_AUTHOR_NAME

with_fauxton = $WITH_FAUXTON
with_docs = $WITH_DOCS
with_nouveau = $WITH_NOUVEAU
with_clouseau = $WITH_CLOUSEAU

user = $COUCHDB_USER
js_engine = $JS_ENGINE
spidermonkey_version = $SM_VSN
with_spidermonkey = $WITH_SPIDERMONKEY
EOF

cat > $rootdir/config.erl << EOF
{with_proper, $WITH_PROPER}.
{erlang_md5, $ERLANG_MD5}.
{js_engine, "$JS_ENGINE"}.
{spidermonkey_version, "$SM_VSN"}.
{with_spidermonkey, $WITH_SPIDERMONKEY}.
EOF

install_local_rebar() {
    if [ ! -x "${rootdir}/bin/rebar" ]; then
	echo "==> Installing local Rebar..."
        if [ ! -d "${rootdir}/src/rebar" ]; then
	    echo "Cloning Rebar repository..."
            git clone --depth 1 https://github.com/apache/couchdb-rebar.git ${rootdir}/src/rebar
        fi
	echo "Building Rebar..."
        make -C ${rootdir}/src/rebar
	echo "Moving Rebar binary to ${rootdir}/bin/rebar..."
        mv ${rootdir}/src/rebar/rebar ${rootdir}/bin/rebar
	echo "Cleaning up Rebar build artifacts..."
        make -C ${rootdir}/src/rebar clean
	echo "Rebar installation complete."
    fi
}

install_local_rebar3() {
    if [ ! -x "${rootdir}/bin/rebar3" ]; then
	echo "==> Installing local Rebar3..."
        if [ ! -d "${rootdir}/src/rebar3" ]; then
	    echo "Cloning Rebar3 repository (branch: ${REBAR3_BRANCH})..."
            git clone --depth 1 --branch ${REBAR3_BRANCH} https://github.com/erlang/rebar3.git ${rootdir}/src/rebar3
        fi
	echo "Building Rebar3..."
        cd src/rebar3
        ./bootstrap
        mv ${rootdir}/src/rebar3/rebar3 ${rootdir}/bin/rebar3
        cd ../..
	echo "Rebar3 installation complete."
    fi
}

install_local_erlfmt() {
    if [ ! -x "${rootdir}/bin/erlfmt" ]; then
	echo "==> Installing local erlfmt..."
        if [ ! -d "${rootdir}/src/erlfmt" ]; then
	    echo "Cloning erlfmt repository (version: ${ERLFMT_VERSION})..."
            git clone --depth 1 --branch "${ERLFMT_VERSION}" https://github.com/WhatsApp/erlfmt.git ${rootdir}/src/erlfmt
        fi
	echo "Building erlfmt with Rebar3..."
        cd "${rootdir}"/src/erlfmt
        ${REBAR3} as release escriptize
	echo "Moving erlfmt binary to ${rootdir}/bin/erlfmt..."
        mv ${rootdir}/src/erlfmt/_build/release/bin/erlfmt ${rootdir}/bin/erlfmt
	echo "Cleaning up erlfmt build artifacts..."
        ${REBAR3} clean
        cd ../..
	echo "erlfmt installation complete."
    fi
}

check_local_clouseau_dir() {
    _dir="$1"

    if [ -e "$_dir" ]; then
	printf "ERROR: \"%s\" already exists.  Please remove or move it away first.\n" "$_dir" >&2
	exit 1
    fi
}

fetch_file() {
    _file_name="$1"
    _file_url="$2"
    _max_attempts=3
    _attempt=1

    while [ $_attempt -le $_max_attempts ]; do
        if curl -sSL --max-redirs 1 -o "$_file_name" "$_file_url"; then
            return 0
        fi
        echo "WARNING: Attempt $_attempt of $_max_attempts failed to download $_file_url" >&2
        _attempt=$((_attempt + 1))
        sleep 2
    done
    printf "ERROR: Failed to download %s after %d attempts.\n" "$_file_url" "$_max_attempts" >&2
    exit 1
}

install_local_clouseau() {
    case "$CLOUSEAU_MTH" in
	dist)
	    _DIST_URL=$(printf "$CLOUSEAU_URI" "$CLOUSEAU_VSN" "$CLOUSEAU_VSN")
	    _MAVEN_BASE_URI=https://repo1.maven.org/maven2
	    _LOGBACK_DIST_URL="$_MAVEN_BASE_URI"/ch/qos/logback

	    : "${LOGBACK_VERSION:=1.2.13}"
	    _LOGBACK_CORE_JAR=logback-core-"$LOGBACK_VERSION".jar
	    _LOGBACK_CORE_URL="$_LOGBACK_DIST_URL"/logback-core/"$LOGBACK_VERSION"/"$_LOGBACK_CORE_JAR"
	    _LOGBACK_CLASSIC_JAR=logback-classic-"$LOGBACK_VERSION".jar
	    _LOGBACK_CLASSIC_URL="$_LOGBACK_DIST_URL"/logback-classic/"$LOGBACK_VERSION"/"$_LOGBACK_CLASSIC_JAR"

	    echo "==> Installing local Clouseau (dist method)..."
	    check_local_clouseau_dir "$CLOUSEAU_DIR"
	    echo "Creating Clouseau directory at ${CLOUSEAU_DIR}..."
	    mkdir -p "$CLOUSEAU_DIR"

	    echo "Fetching Clouseau from $_DIST_URL..."

	    fetch_file clouseau.zip "$_DIST_URL"
	    
	    echo "Extracting Clouseau distribution..."
	    if ! unzip -q -j clouseau.zip -d "$CLOUSEAU_DIR"; then
		printf "ERROR: Clouseau distribution package (clouseau.zip) could not be extracted.\n" >&2
		exit 1
	    fi

	    echo "Removing temporary Clouseau zip file..."
	    rm clouseau.zip

	    echo "Fetching Logback $LOGBACK_VERSION from $_LOGBACK_DIST_URL..."
	    fetch_file "$CLOUSEAU_DIR"/"$_LOGBACK_CORE_JAR" "$_LOGBACK_CORE_URL"
	    echo "Fetching Logback $LOGBACK_VERSION classic from $_LOGBACK_CLASSIC_URL..."
	    fetch_file "$CLOUSEAU_DIR"/"$_LOGBACK_CLASSIC_JAR" "$_LOGBACK_CLASSIC_URL"
	    echo "Clouseau (dist) installation complete."
	    ;;

	git)
	    echo "==> Installing local Clouseau (git method)..."
	    echo "Cloning Clouseau from $CLOUSEAU_URI ($CLOUSEAU_VSN)..."
	    check_local_clouseau_dir "$CLOUSEAU_DIR"
	    git clone --depth 1 --branch "$CLOUSEAU_VSN" "$CLOUSEAU_URI" "$CLOUSEAU_DIR"
	    echo "Clouseau (git) installation complete."
	    ;;

	*) printf "ERROR: Invalid Clouseau deployment method '%s'. Valid options are 'dist' or 'git'.\n" "$CLOUSEAU_MTH" >&2
	   exit 1
	    ;;
    esac
}

if [ -z "${REBAR}" ]; then
    install_local_rebar
    REBAR=${rootdir}/bin/rebar
fi

if [ -z "${REBAR3}" ]; then
    install_local_rebar3
    REBAR3=${rootdir}/bin/rebar3
fi

if [ -z "${ERLFMT}" ]; then
    install_local_erlfmt
    ERLFMT=${rootdir}/bin/erlfmt
fi

if [ "$WITH_CLOUSEAU" = "true" ]; then
    install_local_clouseau
fi

# only update dependencies, when we are not in a release tarball
if [ -d .git ] && [ "$SKIP_DEPS" = "false" ]; then
    echo "==> updating dependencies"
    ${REBAR} get-deps update-deps
fi

# External repos frequently become integrated with the primary repo,
# resulting in obsolete .git directories, and possible confusion.
# It is usually a good idea to delete these .git directories.
for path in $(find src -name .git -type d); do
    git ls-files --error-unmatch $(dirname $path) > /dev/null 2>&1 && \
        echo "WARNING unexpected .git directory $path"
done

echo "You have configured Apache CouchDB, time to relax. Relax."
