% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
% ex: ts=4 sw=4 ft=erlang et
% Licensed under the Apache License, Version 2.0 (the "License"); you may not
% use this file except in compliance with the License. You may obtain a copy of
% the License at
%
%   http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
% WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
% License for the specific language governing permissions and limitations under
% the License.

Arch = "(linux|darwin|freebsd)",

PreHooks = [
    {Arch, compile, "make CONFIG_BIGNUM= -C quickjs -j8 libquickjs.lto.a qjsc"},
    {Arch, compile, "escript build_js.escript compile"}
].

PostHooks = [
    {Arch, clean, "make -C quickjs clean"},
    {Arch, clean, "escript build_js.escript clean"}
].

Env = [
    {"CFLAGS", "-flto -g -Wall -D_GNU_SOURCE -DCONFIG_BIGNUM=0 -O2 -Iquickjs"},
    {"LDFLAGS", "-flto -lm quickjs/libquickjs.lto.a"},
    % Clear ERL flags out as we're not actually building a NIF or driver here
    {"ERL_CFLAGS", ""},
    {"ERL_LDFLAGS", ""},
    {"EXE_CFLAGS", ""},
    {"EXE_LDFLAGS", ""}
].

% couchjs_*_bytecode.c sources are auto-generated by build_js.escript
%
MainjsSrc = ["c_src/couchjs.c", "c_src/couchjs_mainjs_bytecode.c"],
CoffeeSrc = ["c_src/couchjs.c", "c_src/couchjs_coffee_bytecode.c"],
PortSpecs = [
    {Arch, "priv/couchjs_mainjs", MainjsSrc, [{env, Env}]},
    {Arch, "priv/couchjs_coffee", CoffeeSrc, [{env, Env}]}
].

AddConfig = [
    {port_specs, PortSpecs},
    {pre_hooks, PreHooks},
    {post_hooks, PostHooks}
].

lists:foldl(fun({K, V}, CfgAcc) ->
    case lists:keyfind(K, 1, CfgAcc) of
        {K, Existent} when is_list(Existent) andalso is_list(V) ->
            lists:keystore(K, 1, CfgAcc, {K, Existent ++ V});
        false ->
            lists:keystore(K, 1, CfgAcc, {K, V})
    end
end, CONFIG, AddConfig).
